name: Release & Publish

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  pull-requests: read
  actions: read
  checks: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Build project
      run: npm run build
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: seiken-fx-coverage
        fail_ci_if_error: false

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Check if version changed
      id: version-changed
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if tag already exists
        if git ls-remote --tags origin | grep -q "refs/tags/v$CURRENT_VERSION$"; then
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "Version $CURRENT_VERSION already exists"
        else
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "New version $CURRENT_VERSION detected"
        fi
      
    - name: Create Git tag
      if: steps.version-changed.outputs.version_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.version-changed.outputs.current_version }}" -m "Release v${{ steps.version-changed.outputs.current_version }}"
        git push origin "v${{ steps.version-changed.outputs.current_version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Publish to npm
      if: steps.version-changed.outputs.version_changed == 'true'
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      if: steps.version-changed.outputs.version_changed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version-changed.outputs.current_version }}
        name: Release v${{ steps.version-changed.outputs.current_version }}
        body: |
          ## Changes
          
          See [CHANGELOG.md](CHANGELOG.md) for details.
          
          ## Installation
          
          ```bash
          npm install seiken-fx@${{ steps.version-changed.outputs.current_version }}
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
